{
    "translation-unit(0,0)": {
        "pp-directive(0,0)": {
            "[pp_include](0,0)": "#include"
        },
        "pp-directive(0,8)": {
            "[pp_token](0,8)": " <stdio.h>",
            "[NEWLINE](1,0)": "\r\n",
            "[NEWLINE](2,0)": "\r\n"
        },
        "function-definition(2,0)": {
            "[int](2,0)": "int",
            "[WHITESPACE](2,3)": " ",
            "[identifier](2,4)": "main",
            "[left_paren](2,8)": "(",
            "[void](2,9)": "void",
            "[right_paren](2,13)": ")",
            "[NEWLINE](3,0)": "\r\n",
            "compound-statement(3,0)": {
                "[left_brace](3,0)": "{",
                "[NEWLINE](4,0)": "\r\n",
                "[WHITESPACE](4,0)": "\t",
                "declaration(4,1)": {
                    "[int](4,1)": "int",
                    "[WHITESPACE](4,4)": " ",
                    "[identifier](4,5)": "hoge",
                    "[WHITESPACE](4,9)": " ",
                    "[simple_assign_op](4,10)": "=",
                    "[WHITESPACE](4,11)": " ",
                    "postfix-expression(4,12)": {
                        "primary-expression(4,12)": {
                            "[decimal_constant](4,12)": "11"
                        }
                    },
                    "[semicolon](4,14)": ";",
                    "[NEWLINE](5,0)": "\r\n",
                    "[WHITESPACE](5,0)": "\t"
                },
                "declaration(5,1)": {
                    "[int](5,1)": "int",
                    "[WHITESPACE](5,4)": " ",
                    "[identifier](5,5)": "fuga",
                    "[semicolon](5,9)": ";",
                    "[NEWLINE](6,0)": "\r\n",
                    "[WHITESPACE](6,0)": "\t"
                },
                "statement(6,1)": {
                    "expression(6,1)": {
                        "postfix-expression(6,1)": {
                            "primary-expression(6,1)": {
                                "[decimal_constant](6,1)": "234"
                            }
                        }
                    },
                    "[semicolon](6,4)": ";",
                    "[NEWLINE](7,0)": "\r\n",
                    "[WHITESPACE](7,0)": "\t"
                },
                "statement(7,1)": {
                    "expression(7,1)": {
                        "postfix-expression(7,1)": {
                            "primary-expression(7,1)": {
                                "[identifier](7,1)": "fuga",
                                "[WHITESPACE](7,5)": " "
                            }
                        },
                        "[simple_assign_op](7,6)": "=",
                        "[WHITESPACE](7,7)": " ",
                        "postfix-expression(7,8)": {
                            "primary-expression(7,8)": {
                                "[identifier](7,8)": "hoge"
                            }
                        }
                    },
                    "[semicolon](7,12)": ";",
                    "[NEWLINE](8,0)": "\r\n",
                    "[WHITESPACE](8,0)": "\t"
                },
                "statement(8,1)": {
                    "expression(8,1)": {
                        "postfix-expression(8,1)": {
                            "primary-expression(8,1)": {
                                "[identifier](8,1)": "printf"
                            },
                            "[left_paren](8,7)": "(",
                            "postfix-expression(8,8)": {
                                "primary-expression(8,8)": {
                                    "[string_literal](8,8)": "\"Hi!!\""
                                }
                            },
                            "[right_paren](8,14)": ")"
                        }
                    },
                    "[semicolon](8,15)": ";",
                    "[NEWLINE](9,0)": "\r\n",
                    "[WHITESPACE](9,0)": "\t"
                },
                "statement(9,1)": {
                    "[return](9,1)": "return",
                    "[WHITESPACE](9,7)": " ",
                    "expression(9,8)": {
                        "postfix-expression(9,8)": {
                            "primary-expression(9,8)": {
                                "[octal_constant](9,8)": "0"
                            }
                        }
                    },
                    "[semicolon](9,9)": ";",
                    "[NEWLINE](10,0)": "\r\n"
                },
                "[right_brace](10,0)": "}",
                "[NEWLINE](11,0)": "\r\n"
            }
        },
        "EOF(11,0)": ""
    }
}